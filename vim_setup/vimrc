" Shortcuts:
" F2 - Nerdtree
" F3 - Toogle indentline
" F4 - Toogle autoindent for paste
" F5 - Ctags
" F8 - Tagbar

" $PYTHONPATH='/home/bigbywolf/anaconda3/lib/python3.5/site-packages'
"configure for 256 color use
set t_Co=256

set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)

" code folding
Plugin 'tmhedberg/SimpylFold'
" auto indent for python
Plugin 'vim-scripts/indentpython.vim'

" best autocomplete
" Bundle 'Valloric/YouCompleteMe'

" Supertab autocomplete
Plugin 'ervandew/supertab'

" automatic closing of brackets and others
Plugin 'Raimondi/delimitMate'

" doesn't seem to work
" Plugin 'rdnetto/YCM-Generator'

" Track the engine.
Plugin 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
" Plugin 'honza/vim-snippets'

" syntax corrections
Plugin 'scrooloose/syntastic'
" syntax checking
Plugin 'nvie/vim-flake8'

" colorschemes
" Plugin 'jnurmine/Zenburn'
" Plugin 'altercation/vim-colors-solarized'

" file explorer
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
" super search with <C-p>
Plugin 'kien/ctrlp.vim'

" Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" git wrapper for vim
Plugin 'tpope/vim-fugitive'
" easier commiting of code
Plugin 'tpope/vim-commentary'
" visualize your Vim undo tree
Plugin 'sjl/gundo.vim'
" additional syntax highlighting
Plugin 'justinmk/vim-syntax-extra'

" show list of all tags
" Plugin 'vim-scripts/taglist.vim'
Plugin 'majutsushi/tagbar'

" support for c shortcuts
Plugin 'c.vim'
" show indentation lines
Plugin 'yggdroot/indentline'

" better syntax highlighting for c++
Plugin 'octol/vim-cpp-enhanced-highlight'

Plugin 'christoomey/vim-tmux-navigator'

Plugin 'dracula/vim'

Plugin 'rip-rip/clang_complete'


" easier ctags handler
" Plugin 'xolox/vim-easytags'
" need to run easy-tags
" Plugin 'xolox/vim-misc'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
filetype plugin on
filetype on                  " required

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

" paste into vim with ctrl-shift v
" set paste

set tags=./tags;/
set tags+=~/.vim/tags/stdtags,tags,.tags,../tags


map <F5> :!start /min ctags -R .<cr>

" Ctrl+\ - Open the definition in a new tab
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" Alt+] - Open the definition in a vertical split
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Install DoxygenToolkit from http://www.vim.org/scripts/script.php?script_id=987
let g:DoxygenToolkit_authorName="Arian Suarez"

" intelligent comments
set comments=sl:/*,mb:\ *,elx:\ */

"line for marking end recommended end
set colorcolumn=120
highlight ColorColumn ctermbg=darkgray

"Filetype detection
augroup project
	autocmd!
    autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
augroup END

" Setting path variable
let &path.="src/include,/usr/include/AL,"
set includeexpr=substitute(v:fname,'\\.','/','g')

"Settings
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set autoindent
set backspace=indent,eol,start
set background=dark 
set shiftround
set ignorecase
set showmode
set ruler
set showcmd
set mouse=a
set mousefocus " No keypressing -- focus-follows-mouse for gvim, in _gvimrc

au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" au BufNewFile,BufRead *.c
"     \ set tabstop=4
"     \ set softtabstop=4
"     \ set shiftwidth=4
"     \ set textwidth=79
"     \ set expandtab
"     \ set autoindent
"     \ set smartindent
"     \ set fileformat=unix

" au BufNewFile,BufRead *.py
"     \ set tabstop=4
"     \ set softtabstop=4
"     \ set shiftwidth=4
"     \ set textwidth=79
"     \ set expandtab
"     \ set autoindent
"     \ set smartindent
"     \ set fileformat=unix

" au BufNewFile,BufRead *.js, *.html, *.css
"     \ set tabstop=2
"     \ set softtabstop=2
"     \ set shiftwidth=2
"     \ set expandtab
"     \ set autoindent
"     \ set smartindent
"     \ set fileformat=unix

" au BufNewFile,BufRead *.html
"     \ set tabstop=2
"     \ set softtabstop=2
"     \ set shiftwidth=2

" set tabstop=4
" set softtabstop=4
" set shiftwidth=4
" set expandtab

au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

set encoding=utf-8

" let g:ycm_autoclose_preview_window_after_completion=1
" let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"
" map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:indentLine_char = '.'
map <F3> :IndentLinesToggle<CR>

let python_highlight_all=1
syntax on

" colorscheme badwolf
colorscheme onedark
" colorscheme pychimp
" colorscheme Monokai-Refined
" colorscheme kalisi
" colorscheme molokai
" colorscheme dracula

let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
" start tree with <F2>
map <F2> :NERDTreeToggle<CR>
map <F6> :SyntasticReset<CR>

" toggle autoindent for pasting content
nnoremap <F4> :set invpaste paste?<CR>
set pastetoggle=<F4>
set showmode

" toggle tag list
" nnoremap <silent> <F8> :TlistToggle<CR>
nmap <F8> :TagbarToggle<CR>

set number
set showcmd
set cursorline
set showmatch
" search as characters are entered
"set incsearch
" highlight search
set hlsearch

" need to make line appear on single windows
set laststatus=2

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

" save session
nnoremap <leader>s :mksession<CR>

"split navigations
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>

" To quickly resize windows with a vertical split
map - <C-W>-
map + <C-W>+

" Indenting in visual mode keeps the visual highlight. 
vnoremap < <gv 
vnoremap > >gv
"
" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Jump to start and end of line using the home row keys. 
nnoremap H ^ 
nnoremap L $

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" python with virtualenv support
" py << EOF
" import os
" import sys
" if 'VIRTUAL_ENV' in os.environ:
"   project_base_dir = os.environ['VIRTUAL_ENV']
"   activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"   execfile(activate_this, dict(__file__=activate_this))
" EOF

filetype plugin on
set omnifunc=syntaxcomplete#Complete
autocmd FileType python set omnifunc=pythoncomplete#Complete

let g:SuperTabDefaultCompletionType = "context"

 " path to directory where library can be found
 " let g:clang_library_path='/usr/lib/llvm-3.8/lib'
 " or path directly to the library file
 let g:clang_library_path='/usr/lib64/libclang.so.3.8'

set guifont=Inconsolata\ 11

